// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "npm:@xata.io/client@latest";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "npm:@xata.io/client@latest";

const tables = [
  {
    name: "Person",
    columns: [
      { name: "FirstName", type: "string" },
      { name: "LastName", type: "string" },
    ],
    revLinks: [
      { column: "Person", table: "Loan" },
      { column: "Person", table: "Savings" },
    ],
  },
  {
    name: "Loan",
    columns: [
      { name: "LoanAmount", type: "int" },
      { name: "InterestRate", type: "int" },
      { name: "Description", type: "string" },
      { name: "Person", type: "link", link: { table: "Person" } },
      { name: "LoanName", type: "string" },
    ],
    revLinks: [{ column: "Loan", table: "PartitionedLoan" }],
  },
  {
    name: "Expenses",
    columns: [
      { name: "expenseName", type: "string" },
      { name: "expense", type: "int" },
      { name: "expenseDate", type: "datetime" },
    ],
  },
  {
    name: "Income",
    columns: [
      { name: "incomeName", type: "string" },
      { name: "income", type: "int" },
    ],
  },
  {
    name: "Goal",
    columns: [
      { name: "image", type: "file" },
      { name: "name", type: "text", notNull: true, defaultValue: "GoalName" },
      { name: "moneyRequired", type: "int" },
    ],
  },
  {
    name: "PartitionedLoan",
    columns: [
      { name: "Loan", type: "link", link: { table: "Loan" } },
      { name: "PartitionedAmount", type: "int" },
      { name: "DateDue", type: "datetime" },
      { name: "isPaid", type: "bool" },
    ],
  },
  {
    name: "Savings",
    columns: [
      { name: "currentAmount", type: "int", notNull: true, defaultValue: "0" },
      { name: "Person", type: "link", link: { table: "Person" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Person = InferredTypes["Person"];
export type PersonRecord = Person & XataRecord;

export type Loan = InferredTypes["Loan"];
export type LoanRecord = Loan & XataRecord;

export type Expenses = InferredTypes["Expenses"];
export type ExpensesRecord = Expenses & XataRecord;

export type Income = InferredTypes["Income"];
export type IncomeRecord = Income & XataRecord;

export type Goal = InferredTypes["Goal"];
export type GoalRecord = Goal & XataRecord;

export type PartitionedLoan = InferredTypes["PartitionedLoan"];
export type PartitionedLoanRecord = PartitionedLoan & XataRecord;

export type Savings = InferredTypes["Savings"];
export type SavingsRecord = Savings & XataRecord;

export type DatabaseSchema = {
  Person: PersonRecord;
  Loan: LoanRecord;
  Expenses: ExpensesRecord;
  Income: IncomeRecord;
  Goal: GoalRecord;
  PartitionedLoan: PartitionedLoanRecord;
  Savings: SavingsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Paul-Anthony-Ragsac-s-workspace-96i8v1.us-east-1.xata.sh/db/loan-database",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
